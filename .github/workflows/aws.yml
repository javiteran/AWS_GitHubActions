name: Deploy Flask App to ECS

on:
  push:
    branches: ["main"]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configurar Credenciales AWS
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          aws-region: ${{ secrets.AWS_REGION }}              
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: 🧪 Test AWS credentials antes de configurar 
        run: |
          echo "Probando credenciales AWS..."
          aws sts get-caller-identity || echo "❌ Error al verificar identidad AWS"
        env:
          aws-region: ${{ secrets.AWS_REGION }}              
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
#################
      - name: Buscar el AWS Account ID y el ARN del secreto de AWS Server Manager
        id: get-aws-info
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "AWS Account ID: $ACCOUNT_ID"
          
          # Obtener el ARN completo del secreto
          SECRET_ARN=$(aws secretsmanager describe-secret --secret-id secretos-despliegue-aws --query 'ARN' --output text)
          echo "secret-arn=$SECRET_ARN" >> $GITHUB_OUTPUT
          echo "Secret ARN: $SECRET_ARN"
          
          # Obtener todos los secretos y crear archivo .env
          echo "🔧 Creando archivo .env con secretos de AWS..."
          SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id secretos-despliegue-aws --query 'SecretString' --output text)
          
          # Extraer cada valor y escribir al archivo .env
          DB_HOST=$(echo "$SECRET_JSON" | jq -r '.DB_HOST')
          DB_NAME=$(echo "$SECRET_JSON" | jq -r '.DB_NAME')
          DB_PASSWORD=$(echo "$SECRET_JSON" | jq -r '.DB_PASSWORD')
          DB_USER=$(echo "$SECRET_JSON" | jq -r '.DB_USER')
          
          # Crear archivo .env
          cat > .env << EOF
          DB_HOST=$DB_HOST
          DB_NAME=$DB_NAME
          DB_PASSWORD=$DB_PASSWORD
          DB_USER=$DB_USER
          DB_PORT=3306
          FLASK_HOST=0.0.0.0
          FLASK_PORT=80
          FLASK_DEBUG=False
          EOF
          
          echo "✅ Archivo .env creado con secretos de AWS"
          echo "🔍 DB_HOST configurado: $DB_HOST"
          echo "🔍 DB_NAME configurado: $DB_NAME"
          echo "🔍 DB_USER configurado: $DB_USER"
          
          # Opcional: Ver todos los secretos disponibles
          echo "📋 Secretos disponibles en secretos-despliegue-aws:"
          echo "$SECRET_JSON" | jq -r 'keys[]'

      - name: Iniciar sesion en Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR. Elastic Container Registry
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Imagen construida y subida: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Prepare ECS Task Definition
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          AWS_ACCOUNT_ID: ${{ steps.get-aws-info.outputs.account-id }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SECRET_ARN: ${{ steps.get-aws-info.outputs.secret-arn }}
        run: |
          # Reemplazar placeholders en el archivo de definición de tarea
          sed "s|tu-repositorio-aws/tu-imagen:latest|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" ecs-task-def.json > ecs-task-def-rendered.json
          sed -i "s|{{AWS_ACCOUNT_ID}}|$AWS_ACCOUNT_ID|g" ecs-task-def-rendered.json
          sed -i "s|{{AWS_REGION}}|$AWS_REGION|g" ecs-task-def-rendered.json
          # Reemplazar el ARN del secreto completo 
          echo $SECRET_ARN
          #arn:aws:secretsmanager
          sed -i "s|arn:aws:secretsmanager|$SECRET_ARN|g" ecs-task-def-rendered.json
          echo "✅ Task definition preparada:" 
          cat ecs-task-def-rendered.json

      - name: Actualizar el servicio ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2.1.1
        with:
          task-definition: ecs-task-def-rendered.json
          #service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
