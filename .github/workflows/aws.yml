name: Deploy Flask App to ECS

on:
  push:
    branches: ["main"]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configurar Credenciales AWS
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          aws-region: ${{ secrets.AWS_REGION }}              
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: üß™ Test AWS credentials antes de configurar 
        run: |
          echo "Probando credenciales AWS..."
          aws sts get-caller-identity || echo "‚ùå Error al verificar identidad AWS"
        env:
          aws-region: ${{ secrets.AWS_REGION }}              
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Buscar el AWS Account ID y el ARN del secreto de AWS Server Manager
        id: get-aws-info
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "AWS Account ID: $ACCOUNT_ID"
          
          # Obtener el ARN completo del secreto
          SECRET_ARN=$(aws secretsmanager describe-secret --secret-id secretos-despliegue-aws --query 'ARN' --output text)
          echo "secret-arn=$SECRET_ARN" >> $GITHUB_OUTPUT
          echo "Secret ARN: $SECRET_ARN"

      - name: Iniciar sesion en Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR. Elastic Container Registry
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Imagen construida y subida: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Prepare ECS Task Definition
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          AWS_ACCOUNT_ID: ${{ steps.get-aws-info.outputs.account-id }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SECRET_ARN: ${{ steps.get-aws-info.outputs.secret-arn }}
        run: |
          # Reemplazar placeholders en el archivo de definici√≥n de tarea
          sed "s|tu-repositorio-aws/tu-imagen:latest|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" ecs-task-def.json > ecs-task-def-rendered.json
          sed -i "s|{{AWS_ACCOUNT_ID}}|$AWS_ACCOUNT_ID|g" ecs-task-def-rendered.json
          sed -i "s|{{AWS_REGION}}|$AWS_REGION|g" ecs-task-def-rendered.json
          # Reemplazar el ARN del secreto completo 
          echo $SECRET_ARN
          #arn:aws:secretsmanager
          sed -i "s|arn:aws:secretsmanager|$SECRET_ARN|g" ecs-task-def-rendered.json
          echo "‚úÖ Task definition preparada:"
          cat ecs-task-def-rendered.json

      - name: Actualizar el servicio ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2.1.1
        with:
          task-definition: ecs-task-def-rendered.json
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Mostrar IP p√∫blica del contenedor ECS
        env:
          CLUSTER: ${{ secrets.ECS_CLUSTER }}
          SERVICE: ${{ secrets.ECS_SERVICE }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "Buscando la √∫ltima tarea lanzada en el servicio..."
          TASK_ARN=$(aws ecs list-tasks --cluster "$CLUSTER" --service-name "$SERVICE" --desired-status RUNNING --region "$AWS_REGION" --query 'taskArns[-1]' --output text)
          echo "√öltima tarea: $TASK_ARN"
          if [ "$TASK_ARN" = "None" ] || [ -z "$TASK_ARN" ]; then
            echo "No se encontr√≥ ninguna tarea en ejecuci√≥n."
            exit 1
          fi
          ENI_ID=$(aws ecs describe-tasks --cluster "$CLUSTER" --tasks "$TASK_ARN" --region "$AWS_REGION" --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
          echo "ENI: $ENI_ID"
          if [ -z "$ENI_ID" ]; then
            echo "No se pudo obtener el ENI de la tarea."
            exit 1
          fi
          PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids "$ENI_ID" --region "$AWS_REGION" --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
          if [ "$PUBLIC_IP" = "None" ] || [ -z "$PUBLIC_IP" ]; then
            echo "No se encontr√≥ IP p√∫blica asociada."
            exit 1
          fi
          echo "La IP p√∫blica del contenedor ECS es: $PUBLIC_IP"
